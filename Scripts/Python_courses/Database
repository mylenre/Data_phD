##Create DataBase

# Import create_engine
from sqlalchemy import create_engine
# Create an engine that connects to the census.sqlite file: engine
engine = create_engine('sqlite:///census.sqlite')
# Print table names
print(engine.table_names())

#Autoloading Tables from a database

# Import create_engine, MetaData, and Table
from sqlalchemy import create_engine,Table, MetaData
# Create engine: engine
engine = create_engine('sqlite:///census.sqlite')
# Create a metadata object: metadata
metadata = MetaData()
# Reflect census table from the engine: census
census = Table('census', metadata, autoload=True, autoload_with=engine)
# Print census table metadata
print(repr(census))
# Print the column names
print(census.columns.keys())
# Print full metadata of census
print(repr(metadata.tables['census']))


#querying
from sqlalchemy import select
connection = engine.connect()
stmt = 'SELECT * FROM people' OR  select([census])          #select all rows & columns in people table
result_proxy = connection.execute(stmt)
results = result_proxy.fetchall()
OR results = connection.execute(stmt).fetchall()
results = connection.execute(stmt).fetchmany(size=10)
first_row = results[0]
printfirst_row_keys())
print(first_row[0])
print(first_row.state) #with state the key of a column

##################################write efficient code###########################################################
##### useful functions:####
indexed = enumerate(name_list, start=5) #with start index at which it starts
create_list = list(indexed)
rdn_num = map(function, list) # to apply a same function to all the element list
sqrd_num = map(lamda x: x**2, nums) # lamda= anonymous function
print(list(sqrd_num))

# Create a new list of odd numbers from 1 to 11 by unpacking a range object
nums_list2 = [*range(1,12,2)]
print(nums_list2)

##### Rewrite the for loop to use enumerate #####
indexed_names = []
for i,name in enumerate(names):
    index_name = (i,name)
    indexed_names.append(index_name) 
print(indexed_names)

# Rewrite the above for loop using list comprehension
indexed_names_comp = [(i,name) for i,name in enumerate(names)]
print(indexed_names_comp)

# Unpack an enumerate object with a starting index of one
indexed_names_unpack = [*enumerate(names, start=1)]
print(indexed_names_unpack)


###### Use map to apply str.upper to each element in names#####
names_map  = map(str.upper,names)
print(type(names_map))

# Unpack names_map into a list
names_uppercase = [*names_map]

# Print the list created above
print(names_uppercase)

#######NumPy Array#############"
# Print second row of nums
print(nums[1,:])

# Print all elements of nums that are greater than six
print(nums[nums > 6])

# Double every element of nums
nums_dbl = nums * 2
print(nums_dbl)

# Replace the third column of nums
nums[:,2] = nums[:,2] + 1
print(nums)

# Create a list of arrival times
arrival_times = [*range(10,60,10)]

# Convert arrival_times to an array and update the times
arrival_times_np = np.array(arrival_times)
new_times = arrival_times_np - 3

# Use list comprehension and enumerate to pair guests to new times
guest_arrivals = [(names[i],time) for i,time in enumerate(new_times)]

# Map the welcome_guest function to each (guest,time) pair
welcome_map = map(welcome_guest, guest_arrivals)

guest_welcomes = [*welcome_map]
print(*guest_welcomes, sep='\n')